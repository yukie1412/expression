{"version":3,"sources":["ToggleIcon.tsx","Study.tsx","service.tsx","Review.tsx","const.tsx","Home.tsx","Detail.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToggleIcon","filterTypes","props","useState","item","localStorage","getItem","word","JSON","parse","iconType","val","setVal","useEffect","IconButton","edge","aria-label","onClick","json","setItem","stringify","toggle","color","getIcon","getJson","JSONResult","getRandomIdx","total","Math","floor","random","getRandomQuestion","idx","keys","Object","filter","key","length","question","answer","getTotal","getQuestionSet","options","map","vocab","i","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","studyFilter","all","value","starred","viewed","unread","Study","classes","words","setWords","hideState","setHideState","hiddenWords","setHiddenWords","stateFilter","setStateFilter","tmp","hide","updateFilter","e","target","isViewed","generateFilter","label","id","FormControl","className","InputLabel","Select","labelId","onChange","option","MenuItem","toggleHideState","Filters","Grid","container","alignItems","FormControlLabel","control","Checkbox","name","checked","Container","Typography","component","variant","align","gutterBottom","List","fav","isStarred","ListItem","button","href","ListItemText","primary","ListItemSecondaryAction","toggleWordState","Review","setQuestion","selection","setSelection","solution","setSolution","Card","CardContent","toggleSolution","ListItemIcon","CardActions","Button","disabled","Constants","TITLE","ROUTES","title","link","Home","card","xs","sm","md","Link","Component","Detail","history","useHistory","location","useLocation","useParams","setVocab","data","index","parseInt","isNaN","window","replaceState","last","getVocabDetail","lastViewed","Date","now","toPage","page","cur","push","toLast","toNext","styledListItem","text","arr","split","listContent","accordion","isObj","hasOwnProperty","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","obj","usage","direction","justify","Hidden","mdDown","mdUp","createMuiTheme","palette","main","secondary","typography","h2","breakpoints","down","fontSize","headerText","NavBar","AppBar","position","Toolbar","style","display","only","noWrap","marginLeft","route","App","ThemeProvider","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"shBAoDeA,IChCVC,EDgCUD,EA5Cf,SAAoBE,GAAa,IAAD,EACRC,oBAAkB,WACtC,IAAMC,EAAOC,aAAaC,QAAQJ,EAAMK,MACxC,QAAKH,GAIEI,KAAKC,MAAML,GAAMF,EAAMQ,aAPF,mBACvBC,EADuB,KAClBC,EADkB,KAqC9B,OA3BAC,qBAAU,WACR,IAAMT,EAAOC,aAAaC,QAAQJ,EAAMK,MACjCK,IAAPR,GAAcI,KAAKC,MAAML,GAAMF,EAAMQ,aACpC,CAACR,IAyBF,cAACY,EAAA,EAAD,CAAYC,KAAK,MAAMC,aAAW,WAAWC,QAAS,kBAvBzC,WACb,IAAMb,EAAOC,aAAaC,QAAQJ,EAAMK,MACpCW,EAAY,GACZd,IACFc,EAAOV,KAAKC,MAAML,IAEpBc,EAAKhB,EAAMQ,WAAaQ,EAAKhB,EAAMQ,UACnCL,aAAac,QAAQjB,EAAMK,KAAMC,KAAKY,UAAUF,IAChDN,EAAOM,EAAKhB,EAAMQ,WAe0CW,IAA5D,SAZc,WACd,OAAQnB,EAAMQ,UACZ,IAAK,MACH,OAAOC,EAAM,cAAC,IAAD,CAAUW,MAAM,YAAe,cAAC,IAAD,IAC9C,IAAK,OACH,OAAOX,EAAM,cAAC,IAAD,CAAgBW,MAAM,cAAiB,cAAC,IAAD,IACtD,QACE,MAAO,IAMRC,M,QE5CDC,EAAU,WACd,OAAOC,GAGHC,EAAe,SAACC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAG9BI,EAAoB,SAACC,GACzB,IACMzB,EADOiB,IACeQ,GACtBC,EAAOC,OAAOD,KAAK1B,GAAM4B,QAAO,SAACC,GACrC,MAAe,SAARA,GAAkB7B,EAAK6B,GAAKC,OAAS,GAA8B,kBAAlB9B,EAAK6B,GAAK,MAE9DA,EAAMH,EAAKP,EAAaO,EAAKI,SAEnC,MAAO,CACLC,SAFe/B,EAAK6B,GAAKV,EAAanB,EAAK6B,GAAKC,SAGhDE,OAAQhC,EAAKA,OAIJiC,GAAW,WAEtB,OADahB,IACDa,QA4BDI,GAAiB,WAC5B,IAAMd,EAAQa,KACRR,EAAMN,EAAaC,GACnBW,EAAWP,EAAkBC,GAG7BU,EADOlB,IAEVmB,KAAI,SAACC,EAAiBC,GAAlB,OAAgCA,IAAMb,EAAMM,EAAWP,EAAkBc,MAEhF,MAAO,CACLP,WACAI,a,SD9CCzC,K,UAAAA,E,kBAAAA,E,gBAAAA,E,iBAAAA,M,KAiBL,IAAM6C,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,YAAa,CACXC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,SAIRC,GAA8B,CAClC,CACEjB,IAAKnC,EAAYqD,IACjBC,MAAO,OAET,CACEnB,IAAKnC,EAAYuD,QACjBD,MAAO,WAET,CACEnB,IAAKnC,EAAYwD,OACjBF,MAAO,UAET,CACEnB,IAAKnC,EAAYyD,OACjBH,MAAO,WA8GII,OA1Gf,WACE,IAAMC,EAAUd,KADD,EAEW3C,mBAAkB,IAF7B,mBAER0D,EAFQ,KAEDC,EAFC,OAGmB3D,oBAAkB,GAHrC,mBAGR4D,EAHQ,KAGGC,EAHH,OAIuB7D,mBAAmC,IAJ1D,mBAIR8D,EAJQ,KAIKC,EAJL,OAKuB/D,mBAAiBF,EAAYqD,KALpD,mBAKRa,EALQ,KAKKC,EALL,KAOfvD,qBAAU,WACR,IAAMgD,ECxCKrC,IACDmB,KAAI,SAACC,EAAiBZ,GAChC,MAAO,CACLA,MACAzB,KAAMqC,EAAMrC,SDqCduD,EAASD,GACT,IAHc,EAGRQ,EAAgC,GAHxB,cAIKR,GAJL,IAId,2BAA0B,CAAC,IAAhBtD,EAAe,QAClBH,EAAOC,aAAaC,QAAQC,EAAKA,MACvC8D,EAAI9D,EAAKA,SAAQH,IAAQI,KAAKC,MAAML,GAAMkE,OAN9B,8BAQdJ,EAAeG,KACd,CAACF,IAEJ,IAAMI,EAAe,SAACC,GACpBJ,EAAeI,EAAEC,OAAOlB,QAWpBmB,EAAW,SAACnE,GAChB,QAASF,aAAaC,QAAQC,IAG1BoE,EAAiB,SAACC,EAAelC,GACrC,IAAMmC,EAAK,UAAYD,EACvB,OACE,eAACE,EAAA,EAAD,CAAaC,UAAWnB,EAAQX,YAAhC,UACE,cAAC+B,EAAA,EAAD,CAAYH,GAAIA,EAAhB,SAAqBD,IACrB,cAACK,EAAA,EAAD,CAAQC,QAASL,EAAItB,MAAOY,EAAagB,SAAUZ,EAAnD,SAEI7B,EAAQC,KAAI,SAACyC,GAAD,OACV,cAACC,EAAA,EAAD,CAAU9B,MAAO6B,EAAOhD,IAAxB,SAA8BgD,EAAO7B,iBAa3C+B,EAAkB,WACtBtB,GAAcD,IAGVwB,EAAU,kBACd,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACtC,QAAS,EAAGuC,WAAW,WAAvC,UACIf,EAAe,QAAStB,IAC1B,cAACsC,EAAA,EAAD,CAAkBC,QAAS,cAACC,EAAA,EAAD,CAAUC,KAAK,OAAOC,QAAShC,IACxDa,MAAOb,EAAY,OAAS,OAAQ9C,QAASqE,QAInD,OACE,+BACE,eAACU,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKC,MAAM,SAAS9E,MAAM,cAAc+E,cAAY,EAAvF,mBACA,cAACd,EAAD,IAEC1B,GACG,cAACyC,EAAA,EAAD,CAAMJ,UAAU,MAAhB,SAEIrC,EAAM1B,QAAO,SAAC5B,GACZ,OAAQ4D,GACN,KAAKlE,EAAYuD,QACf,OAzDF,SAACjD,GACjB,IAAMH,EAAOC,aAAaC,QAAQC,GAClC,QAAKH,GAGEI,KAAKC,MAAML,GAAMmG,IAoDCC,CAAUjG,EAAKA,MACxB,KAAKN,EAAYwD,OACf,OAAOiB,EAASnE,EAAKA,MACvB,KAAKN,EAAYyD,OACf,OAAQgB,EAASnE,EAAKA,MACxB,QACE,OAAO,MAEV4B,QAAO,SAAC5B,GAAD,QAAiBwD,IAAoBE,EAAY1D,EAAKA,SAC9DoC,KAAI,SAACpC,EAAayB,GAAd,OACJ,eAACyE,EAAA,EAAD,CAAUC,QAAM,EAACR,UAAU,IAAIS,KAAM,qBAAuBpG,EAAKyB,IAAjE,UACE,cAAC4E,EAAA,EAAD,CAAcC,QAAStG,EAAKA,MAAWA,EAAKyB,KAC5C,eAAC8E,EAAA,EAAD,WACE,cAAC,EAAD,CAAYvG,KAAMA,EAAKA,KAAMG,SAAS,QACtC,cAAC,EAAD,CAAYH,KAAMA,EAAKA,KAAMG,SAAS,OAAOO,QAAS,kBA3ClD,SAACV,GACvB0D,EAAY1D,IAAS0D,EAAY1D,GACjC2D,EAAeD,GAyC+D8C,CAAgBxG,EAAKA,cAJVyB,c,0FE3D9EgF,OAzEf,WAAmB,IAAD,EACgB7G,mBAAsBsC,MADtC,mBACTH,EADS,KACC2E,EADD,OAEkB9G,oBAAkB,GAFpC,mBAET+G,EAFS,KAEEC,EAFF,OAGgBhH,oBAAkB,GAHlC,mBAGTiH,EAHS,KAGCC,EAHD,KAeV9F,EAAU,SAACS,GACf,OAAIoF,EACE9E,EAASI,QAAQV,IAChBM,EAASI,QAAQV,GAAKO,SAAWD,EAASA,SAASC,OAC/C,cAAC,KAAD,IAEF,cAAC,KAAD,IAGLP,IAAQkF,EACH,cAAC,KAAD,IAELlF,IAAQkF,GAAa5E,EAASI,QAAQV,IACrCM,EAASI,QAAQV,GAAKO,SAAWD,EAASA,SAASC,OAC/C,cAAC,KAAD,IAEF,cAAC,KAAD,KAwBT,OACE,+BACE,eAACyD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKC,MAAM,SAAS9E,MAAM,cAAc+E,cAAY,EAAvF,oBAEA,eAACiB,EAAA,EAAD,CAAMnB,QAAQ,WAAd,UAzBC7D,EAGH,eAACiF,EAAA,EAAD,WACE,cAACtB,EAAA,EAAD,CAAYE,QAAQ,KAAKD,UAAU,KAAnC,SAAyC5D,EAASA,SAASA,WAE3D,cAACgE,EAAA,EAAD,CAAMtF,aAAW,UAAjB,SAEIsB,EAASI,QAAQC,KAAI,SAACyC,EAAkBpD,GAAnB,OACnB,eAACyE,EAAA,EAAD,CAAoBC,QAAM,EAACzF,QAAS,kBAAOmG,GAjChC,SAACpF,GACtBmF,EAAaD,IAAclF,GAAO,EAAIA,GAgC2BwF,CAAexF,IAAtE,UACE,cAACyF,GAAA,EAAD,UAAelG,EAAQS,KACvB,cAAC4E,EAAA,EAAD,CAAcC,QAASzB,EAAO7C,WAFjBP,WATD,GA2BlB,eAAC0F,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,CAAQxB,QAAQ,YAAY7E,MAAM,UAAUL,QA1DtC,WACdgG,EAAYxE,MACZ0E,GAAc,GACdE,GAAY,IAuDJ,kBACA,cAACM,GAAA,EAAD,CAAQxB,QAAQ,YAAYlF,QAAS,kBAAMoG,GAAY,IACrDO,SAAUR,EADZ,kCCjEGS,GAhBG,CAChBC,MAAO,mCACPC,OAAQ,CACN,CACEC,MAAO,QACPC,KAAM,oBACN/B,UAAW,kBAAM,cAAC,GAAD,MAEnB,CACE8B,MAAO,SACPC,KAAM,qBACN/B,UAAW,kBAAM,cAAC,GAAD,QCyBRgC,G,4JA3Bb,WACE,OACE,+BACE,eAAClC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKC,MAAM,SAAS9E,MAAM,cAAc+E,cAAY,EAAvF,SAAyFwB,GAAUC,QAEnG,cAACtC,EAAA,EAAD,CAAMC,WAAS,EAACtC,QAAS,EAAzB,SAEI0E,GAAUE,OAAOpF,KAAI,SAACwF,GAAD,OACnB,cAAC3C,EAAA,EAAD,CAAMpF,MAAI,EAAkBgI,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA/C,SACE,cAACC,EAAA,EAAD,CAAM5B,KAAMwB,EAAKF,KAAjB,SACE,cAACX,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACtB,EAAA,EAAD,CAAYI,cAAY,EAACF,QAAQ,KAAKD,UAAU,KAAhD,SAAsDiC,EAAKH,eAJnDG,EAAKH,qB,GAVlBQ,a,0FC6IJC,OA9Hf,WACE,IAAMC,EAAUC,cACVC,EAAWC,cACThE,EAAOiE,cAAPjE,GAHQ,EAIU1E,qBAJV,mBAITyC,EAJS,KAIFmG,EAJE,KAKVpH,EAAQa,KAEd3B,qBAAU,WACR,IAAI+B,EJMsB,SAACZ,GAC7B,IAAMgH,EAAOxH,IACPyH,EAAQC,SAASlH,EAAK,IAC5B,GAAImH,MAAMF,IAAUA,GAASD,EAAK3G,OAEhC,OADA+G,OAAOV,QAAQW,aAAa,KAAML,EAAK,GAAGzI,KAAM,uBACzCyI,EAAK,GAEd,GAAIC,EAAQ,EAAG,CACb,IAAMK,EAAON,EAAK3G,OAAS,EAE3B,OADA+G,OAAOV,QAAQW,aAAa,KAAML,EAAKM,GAAM/I,KAA7C,4BAAwE+I,IACjEN,EAAKM,GAEd,OAAON,EAAKC,GIlBEM,CAAe1E,GAC3BkE,EAASnG,GAET,IAAMxC,EAAOC,aAAaC,QAAQsC,EAAMrC,MACpCW,EAAY,GACZd,IACFc,EAAOV,KAAKC,MAAML,IAEpBc,EAAKsI,WAAaC,KAAKC,MACvBrJ,aAAac,QAAQyB,EAAMrC,KAAMC,KAAKY,UAAUF,MAC/C,CAAC0H,EAAU/D,IAEd,IAAM8E,EAAS,SAACC,GACd,IAAIC,EAAMX,SAASrE,EAAI,IACnBsE,MAAMU,KACRA,EAAM,IAERA,EAAe,SAATD,EAAkBC,EAAM,EAAIA,EAAM,GAC9B,EACRA,EAAMlI,EAAQ,EACLkI,GAAOlI,IAChBkI,EAAM,GAERnB,EAAQoB,KAAR,4BAAkCD,KAG9BE,EAAS,WACbJ,EAAO,SAGHK,EAAS,WACbL,EAAO,SAGHM,EAAiB,SAACC,EAAc3J,GACpC,IAAM4J,EAAMD,EAAKE,MAAM,SACvB,OAAmB,IAAfD,EAAI9H,OACC,8BAAM6H,IAER,gCAAMC,EAAI,GAAG,iCAAS5J,IAAe4J,EAAI,OAG5CE,EAAc,SAACF,EAAe5J,GAAhB,OAClB,cAAC+F,EAAA,EAAD,CAAMtF,aAAW,UAAjB,SAEImJ,EAAIxH,KAAI,SAACuH,EAAclI,GAAf,OACN,cAACyE,EAAA,EAAD,UACE,cAACG,EAAA,EAAD,UACGqD,EAAeC,EAAM3J,MAFXyB,SAUjBsI,EAAY,SAAClI,GAAyC,IAA5BmI,EAA2B,wDACzD,OAAK3H,GAAUA,EAAM4H,eAAepI,GAElC,eAACqI,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,CAAkBC,WAAY,cAAC,KAAD,IAAoBC,gBAAexI,EAAjE,SACE,cAAC6D,EAAA,EAAD,CAAYE,QAAQ,KAApB,SAA0B/D,MAE5B,eAACyI,GAAA,EAAD,YACIN,GAASF,EAAYzH,EAAMR,GAAMQ,EAAMrC,MACxCgK,GAAU,cAACjE,EAAA,EAAD,CAAMtF,aAAYoB,EAAlB,SACRQ,EAAMR,GAAKO,KAAI,SAACmI,EAAgB9I,GAAjB,OACd,gCACE,cAACiE,EAAA,EAAD,CAAYE,QAAQ,YAApB,SAAiC2E,EAAIvK,OACrC,cAACkG,EAAA,EAAD,UACI4D,EAAYS,EAAIC,MAAOD,EAAIvK,UAHvByB,aARFI,GAFiC,IA0DrD,OAAO,+BAlCAQ,EAIH,eAACoD,EAAA,EAAD,WACE,eAACR,EAAA,EAAD,CAAMC,WAAS,EAACuF,UAAU,MAAMC,QAAQ,gBAAgBvF,WAAW,WAAnE,UACE,cAAC5E,EAAA,EAAD,CAAYQ,MAAM,UAAUN,aAAW,aAAakF,UAAU,OAAOjF,QAAS8I,EAA9E,SACE,cAAC,KAAD,MAEF,cAACmB,EAAA,EAAD,CAAQC,QAAM,EAAd,SACE,cAAClF,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKC,MAAM,SAAS9E,MAAM,cAAc+E,cAAY,EAAvF,SACGzD,EAAMrC,SAGX,cAAC,EAAD,CAAYA,KAAMqC,EAAMrC,KAAMG,SAAS,QACvC,cAACI,EAAA,EAAD,CAAYQ,MAAM,UAAUN,aAAW,aAAakF,UAAU,OAAOjF,QAAS+I,EAA9E,SACE,cAAC,KAAD,SAGJ,cAACkB,EAAA,EAAD,CAAQE,MAAI,EAAZ,SACE,cAACnF,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKC,MAAM,SAAS9E,MAAM,cAAc+E,cAAY,EAAvF,SACGzD,EAAMrC,SAIV+J,EAAU,cACVA,EAAU,SACVA,EAAU,YACVA,EAAU,aAAa,GACvBA,EAAU,aAAa,MA5BnB,MCnGPtH,GAAQqI,YAAe,CAC3BC,QAAS,CACPzE,QAAS,CACP0E,KAAM,WAERC,UAAW,CACTD,KAAM,cAIZvI,GAAMyI,WAAWC,GAAjB,2BACK1I,GAAMyI,WAAWC,IADtB,kBAEG1I,GAAM2I,YAAYC,KAAK,MAAQ,CAC9BC,SAAU,UAId,IAAM/I,GAAYC,aAAW,iBAAO,CAClC+I,WAAY,CACVxK,MAAO,QACP4B,OAAQF,GAAMG,QAAQ,EAAG,UAwB7B,SAAS4I,KACP,IAAMnI,EAAUd,KAEhB,OACE,cAACkJ,EAAA,EAAD,CAAQC,SAAS,WAAjB,SACE,eAACC,EAAA,EAAD,WACE,eAAC3D,EAAA,EAAD,CAAM5B,KAAK,cAAcwF,MAAO,CAACC,QAAS,QAA1C,UACE,cAACtL,EAAA,EAAD,CAAYC,KAAK,QAAQO,MAAM,UAAUN,aAAW,OAApD,SACE,cAAC,IAAD,CAAUmL,MAAO,CAAC7K,MAAO,aAE3B,cAAC4J,EAAA,EAAD,CAAQmB,KAAK,KAAb,SACE,cAACpG,EAAA,EAAD,CAAYE,QAAQ,KAAK7E,MAAM,cAAcgL,QAAM,EACjDvH,UAAWnB,EAAQkI,WADrB,SACkCjE,GAAUC,aAIhD,qBAAKqE,MAAO,CAACI,WAAY,OAAQH,QAAS,QAA1C,SAEIvE,GAAUE,OAAOpF,KAAI,SAAC6J,EAAOxK,GAAR,OACnB,cAACuG,EAAA,EAAD,CAAMpC,QAAQ,SAAS7E,MAAM,gBAAgBqF,KAAM6F,EAAMvE,KAAMlD,UAAWnB,EAAQkI,WAAlF,SACGU,EAAMxE,OAD0FhG,aAWlGyK,OAlDf,WACE,OACE,cAAC,IAAD,UACE,eAACC,EAAA,EAAD,CAAe1J,MAAOA,GAAtB,UACE,cAAC+I,GAAD,IAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOY,KAAK,cAAcC,OAAK,EAAC1G,UAAWgC,KAEzCL,GAAUE,OAAOpF,KAAI,SAAC6J,EAAOxK,GAAR,OACnB,cAAC,IAAD,CAAO2K,KAAMH,EAAMvE,KAAgB2E,OAAK,EAAC1G,UAAWsG,EAAMtG,WAA5BlE,MAGlC,cAAC,IAAD,CAAO2K,KAAK,wBAAwBzG,UAAWuC,cCxC1CoE,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCFRQ,GAAcC,SAASC,eAAe,QACxCF,IAAeA,GAAYG,gBAC7BC,mBAAQ,cAAC,GAAD,IAASJ,IAEjBK,kBAAO,cAAC,GAAD,IAASL,IAMlBT,M","file":"static/js/main.e6e21a03.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\n\nfunction ToggleIcon(props: any) {\n  const [val, setVal] = useState<boolean>(() => {\n    const item = localStorage.getItem(props.word);\n    if (!item) {\n      return false;\n    }\n\n    return JSON.parse(item)[props.iconType];\n  });\n\n  useEffect(() => {\n    const item = localStorage.getItem(props.word);\n    item ? setVal(JSON.parse(item)[props.iconType]) : setVal(false);\n  }, [props]);\n\n  const toggle = () => {\n    const item = localStorage.getItem(props.word);\n    let json: any = {};\n    if (item) {\n      json = JSON.parse(item);\n    }\n    json[props.iconType] = !json[props.iconType];\n    localStorage.setItem(props.word, JSON.stringify(json));\n    setVal(json[props.iconType]);\n  }\n\n  const getIcon = () => {\n    switch (props.iconType) {\n      case 'fav':\n        return val ? <StarIcon color=\"primary\" /> : <StarBorderIcon />;\n      case 'hide':\n        return val ? <VisibilityIcon color=\"secondary\" /> : <VisibilityOffIcon />;\n      default:\n        return '';\n    }\n  }\n\n  return (\n    <IconButton edge=\"end\" aria-label=\"favorite\" onClick={() => toggle()}>\n      {getIcon()}\n    </IconButton>\n  );\n}\n\nexport default ToggleIcon;\n\n","import React, { useState, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Typography from '@material-ui/core/Typography';\n\nimport ToggleIcon from './ToggleIcon';\nimport { getVocabs } from './service';\n\nenum filterTypes {\n  all = 'all',\n  starred = 'starred',\n  viewed = 'viewed',\n  unread = 'unread'\n}\n\ninterface IWord {\n  word: string;\n  idx: number;\n}\n\ninterface FilterOption {\n  key: filterTypes;\n  value: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  }\n}));\n\nconst studyFilter: FilterOption[] = [\n  {\n    key: filterTypes.all,\n    value: 'All'\n  },\n  {\n    key: filterTypes.starred,\n    value: 'Starred'\n  },\n  {\n    key: filterTypes.viewed,\n    value: 'Viewed'\n  },\n  {\n    key: filterTypes.unread,\n    value: 'Unread'\n  }\n];\n\nfunction Study() {\n  const classes = useStyles();\n  const [words, setWords] = useState<IWord[]>([]);\n  const [hideState, setHideState] = useState<boolean>(true); // hide by default\n  const [hiddenWords, setHiddenWords] = useState<{[key: string]: boolean}>({});\n  const [stateFilter, setStateFilter] = useState<string>(filterTypes.all);\n\n  useEffect(() => {\n    const words = getVocabs();\n    setWords(words);\n    const tmp: {[key: string]: boolean} = {};\n    for (const word of words) {\n      const item = localStorage.getItem(word.word);\n      tmp[word.word] = item && JSON.parse(item).hide ? true : false;\n    }\n    setHiddenWords(tmp);\n  }, [stateFilter]);\n\n  const updateFilter = (e: any) => {\n    setStateFilter(e.target.value);\n  }\n\n  const isStarred = (word: string) => {\n    const item = localStorage.getItem(word);\n    if (!item) {\n      return false;\n    }\n    return JSON.parse(item).fav;\n  }\n\n  const isViewed = (word: string) => {\n    return !!localStorage.getItem(word);\n  }\n\n  const generateFilter = (label: string, options: FilterOption[]) => {\n    const id = 'filter-' + label;\n    return (\n      <FormControl className={classes.formControl}>\n        <InputLabel id={id}>{label}</InputLabel>\n        <Select labelId={id} value={stateFilter} onChange={updateFilter}>\n          {\n            options.map((option: FilterOption) => (\n              <MenuItem value={option.key}>{option.value}</MenuItem>\n            ))\n          }\n        </Select>\n      </FormControl>\n    );\n  }\n\n  const toggleWordState = (word: string) => {\n    hiddenWords[word] = !hiddenWords[word];\n    setHiddenWords(hiddenWords);\n  }\n\n  const toggleHideState = () => {\n    setHideState(!hideState);\n  }\n\n  const Filters = () => (\n    <Grid container spacing={3} alignItems=\"flex-end\">\n      { generateFilter('State', studyFilter) }\n      <FormControlLabel control={<Checkbox name=\"hide\" checked={hideState} />}\n        label={hideState ? 'Show' : 'Hide'} onClick={toggleHideState}/>\n    </Grid>\n  );\n\n  return (\n    <main>\n      <Container>\n        <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>Study</Typography>\n        <Filters />\n\n        {words && (\n            <List component=\"nav\">\n              {\n                words.filter((word: IWord) => {\n                  switch (stateFilter) {\n                    case filterTypes.starred:\n                      return isStarred(word.word);\n                    case filterTypes.viewed:\n                      return isViewed(word.word);\n                    case filterTypes.unread:\n                      return !isViewed(word.word);\n                    default:\n                      return true;\n                  }\n                }).filter((word: IWord) => hideState ? true : !hiddenWords[word.word]\n                ).map((word: IWord, idx: number) => (\n                  <ListItem button component=\"a\" href={'/expression/study/' + word.idx} key={idx}>\n                    <ListItemText primary={word.word} key={word.idx} />\n                    <ListItemSecondaryAction>\n                      <ToggleIcon word={word.word} iconType=\"fav\" />\n                      <ToggleIcon word={word.word} iconType=\"hide\" onClick={() => toggleWordState(word.word)}/>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                ))\n              }\n            </List>\n          )\n        }\n      </Container>\n    </main>\n  );\n}\n\nexport default Study;\n","import { VocabObj, Question, QuestionSet } from './interfaces/vocabObj';\nimport JSONResult from './idioms.json';\n\nconst getJson = () => {\n  return JSONResult;\n}\n\nconst getRandomIdx = (total: number): number => {\n  return Math.floor(Math.random() * total);\n}\n\nconst getRandomQuestion = (idx: number): Question => {\n  const data = getJson();\n  const word: VocabObj = data[idx];\n  const keys = Object.keys(word).filter((key: string) => {\n    return key !== 'word' && word[key].length > 0 && typeof(word[key][0]) !== 'object';\n  });\n  const key = keys[getRandomIdx(keys.length)];\n  const question = word[key][getRandomIdx(word[key].length)];\n  return {\n    question,\n    answer: word.word\n  };\n}\n\nexport const getTotal = (): number => {\n  const data = getJson();\n  return data.length;\n}\n\nexport const getVocabs = () => {\n  const data = getJson();\n  return data.map((vocab: VocabObj, idx: number) => {\n    return {\n      idx,\n      word: vocab.word\n    };\n  });\n}\n\nexport const getVocabDetail = (idx: string): VocabObj => {\n  const data = getJson();\n  const index = parseInt(idx, 10);\n  if (isNaN(index) || index >= data.length) {\n    window.history.replaceState(null, data[0].word, '/expression/study/0');\n    return data[0];\n  }\n  if (index < 0) {\n    const last = data.length - 1;\n    window.history.replaceState(null, data[last].word, `/expression/study/${last}`);\n    return data[last];\n  }\n  return data[index];\n}\n\nexport const getQuestionSet = (): QuestionSet => {\n  const total = getTotal();\n  const idx = getRandomIdx(total);\n  const question = getRandomQuestion(idx);\n\n  const data = getJson(); // TODO: limit to 5\n  const options = data\n    .map((vocab: VocabObj, i: number) => i === idx ? question : getRandomQuestion(i));\n\n  return {\n    question,\n    options\n  };\n}\n","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\n\nimport { QuestionSet, Question } from './interfaces/vocabObj';\nimport { getQuestionSet } from './service';\n\nfunction Review() {\n  const [question, setQuestion] = useState<QuestionSet>(getQuestionSet());\n  const [selection, setSelection] = useState<number>(-1);\n  const [solution, setSolution] = useState<boolean>(false);\n\n  const getNext = () => {\n    setQuestion(getQuestionSet());\n    setSelection(-1);\n    setSolution(false);\n  }\n\n  const toggleSolution = (idx: number) => {\n    setSelection(selection === idx ? -1 : idx);\n  }\n\n  const getIcon = (idx: number) => {\n    if (solution) {\n      if (question.options[idx]\n        && question.options[idx].answer === question.question.answer) {\n        return <CheckCircleOutlineIcon />\n      }\n      return <HighlightOffIcon />\n    }\n\n    if (idx !== selection) {\n      return <RadioButtonUncheckedIcon />;\n    }\n    if (idx === selection && question.options[idx]\n      && question.options[idx].answer === question.question.answer) {\n      return <CheckCircleOutlineIcon />\n    }\n    return <HighlightOffIcon />\n  }\n\n  const renderCardContent = () => {\n    if (!question) { return ''; }\n\n    return (\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">{question.question.question}</Typography>\n\n        <List aria-label=\"Options\">\n          {\n            question.options.map((option: Question, idx: number) => (\n              <ListItem key={idx} button onClick={() => !solution && toggleSolution(idx)}>\n                <ListItemIcon>{getIcon(idx)}</ListItemIcon>\n                <ListItemText primary={option.answer} />\n              </ListItem>\n            ))\n          }\n        </List>\n      </CardContent>\n    )\n  }\n\n  return (\n    <main>\n      <Container>\n        <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>Review</Typography>\n\n        <Card variant=\"outlined\">\n          {renderCardContent()}\n          <CardActions>\n            <Button variant=\"contained\" color=\"primary\" onClick={getNext}>Next</Button>\n            <Button variant=\"contained\" onClick={() => setSolution(true)}\n              disabled={solution}>Solution</Button>\n          </CardActions>\n        </Card>\n      </Container>\n    </main>\n  );\n}\n\nexport default Review;\n","import Study from './Study';\nimport Review from './Review';\n\nconst Constants = {\n  TITLE: 'Expression française courante',\n  ROUTES: [\n    {\n      title: 'Study',\n      link: '/expression/study',\n      component: () => <Study />\n    },\n    {\n      title: 'Review',\n      link: '/expression/review',\n      component: () => <Review />\n    }\n  ]\n};\n\nexport default Constants;\n","import React, { Component } from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n\nimport Constants from './const';\n\nclass Home extends Component {\n  render() {\n    return (\n      <main>\n        <Container>\n          <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>{Constants.TITLE}</Typography>\n\n          <Grid container spacing={4}>\n            {\n              Constants.ROUTES.map((card) => (\n                <Grid item key={card.title} xs={12} sm={6} md={4}>\n                  <Link href={card.link}>\n                    <Card>\n                      <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">{card.title}</Typography>\n                      </CardContent>\n                    </Card>\n                  </Link>\n                </Grid>\n              ))\n            }\n          </Grid>\n        </Container>\n      </main>\n    );\n  }\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, useHistory, useLocation } from 'react-router';\n\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Container from '@material-ui/core/Container';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nimport ToggleIcon from './ToggleIcon';\nimport { getVocabDetail, getTotal } from './service';\nimport { VocabObj, VocabBase } from './interfaces/vocabObj';\n\ninterface IDetailParam {\n  id: string;\n}\n\nfunction Detail() {\n  const history = useHistory();\n  const location = useLocation();\n  const { id } = useParams<IDetailParam>();\n  const [vocab, setVocab] = useState<VocabObj>();\n  const total = getTotal();\n\n  useEffect(() => {\n    let vocab = getVocabDetail(id);\n    setVocab(vocab);\n  \n    const item = localStorage.getItem(vocab.word);\n    let json: any = {};\n    if (item) {\n      json = JSON.parse(item);\n    }\n    json.lastViewed = Date.now();\n    localStorage.setItem(vocab.word, JSON.stringify(json));\n  }, [location, id]);\n\n  const toPage = (page: 'next' | 'last') => {\n    let cur = parseInt(id, 10);\n    if (isNaN(cur)) {\n      cur = 0;\n    }\n    cur = page === 'next' ? cur + 1 : cur - 1;\n    if (cur < 0) {\n      cur = total - 1;\n    } else if (cur >= total) {\n      cur = 0;\n    }\n    history.push(`/expression/study/${cur}`);\n  }\n\n  const toLast = () => {\n    toPage('last');\n  }\n\n  const toNext = () => {\n    toPage('next');\n  }\n\n  const styledListItem = (text: string, word: string) => {\n    const arr = text.split('_____');\n    if (arr.length === 1) {\n      return <div>{text}</div>\n    }\n    return <div>{arr[0]}<strong>{word}</strong>{arr[1]}</div>\n  };\n\n  const listContent = (arr: string[], word: string) => (\n    <List aria-label=\"Content\">\n      {\n        arr.map((text: string, idx: number) => (\n          <ListItem key={idx}>\n            <ListItemText>\n              {styledListItem(text, word)}\n            </ListItemText>\n          </ListItem>\n        ))\n      }\n    </List>\n  )\n\n  const accordion = (key: string, isObj: boolean = false) => {\n    if (!vocab || !vocab.hasOwnProperty(key)) { return ''; }\n    return (\n      <Accordion key={key}>\n        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls={key}>\n          <Typography variant=\"h6\">{key}</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {!isObj && listContent(vocab[key], vocab.word)}\n          {isObj && (<List aria-label={key}>\n            {vocab[key].map((obj: VocabBase, idx: number) => (\n              <div key={idx}>\n                <Typography variant=\"subtitle1\">{obj.word}</Typography>\n                <ListItem>\n                  { listContent(obj.usage, obj.word) }\n                </ListItem>\n              </div>\n            ))}\n          </List>)}\n        </AccordionDetails>\n      </Accordion>\n    );\n  };\n\n  const content = () => {\n    if (!vocab) {\n      return '';\n    }\n    return (\n      <Container>\n        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"baseline\">\n          <IconButton color=\"primary\" aria-label=\"last vocab\" component=\"span\" onClick={toLast}>\n            <ChevronLeftIcon />\n          </IconButton>\n          <Hidden mdDown>\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              {vocab.word}\n            </Typography>\n          </Hidden>\n          <ToggleIcon word={vocab.word} iconType=\"fav\" />\n          <IconButton color=\"primary\" aria-label=\"next vocab\" component=\"span\" onClick={toNext}>\n            <ChevronRightIcon />\n          </IconButton>\n        </Grid>\n        <Hidden mdUp>\n          <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n            {vocab.word}\n          </Typography>\n        </Hidden>\n\n        {accordion('definition')}\n        {accordion('usage')}\n        {accordion('synonyms')}\n        {accordion('situation', true)}\n        {accordion('extension', true)}\n      </Container>\n    );\n  }\n\n  return <main>{content()}</main>;\n}\n\nexport default Detail;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport { createMuiTheme, ThemeProvider, makeStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Hidden from '@material-ui/core/Hidden';\nimport HomeIcon from '@material-ui/icons/Home';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport Home from './Home';\nimport Detail from './Detail';\nimport Constants from './const';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#01579b',\n    },\n    secondary: {\n      main: '#f50057',\n    },\n  },\n});\ntheme.typography.h2 = {\n  ...theme.typography.h2,\n  [theme.breakpoints.down('md')]: {\n    fontSize: '3rem',\n  },\n};\n\nconst useStyles = makeStyles(() => ({\n  headerText: {\n    color: 'white',\n    margin: theme.spacing(1, 1.5),\n  }\n}));\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={theme}>\n        <NavBar />\n\n        <Switch>\n          <Route path=\"/expression\" exact component={Home} />\n          {\n            Constants.ROUTES.map((route, idx) => (\n              <Route path={route.link} key={idx} exact component={route.component} />\n            ))\n          }\n          <Route path=\"/expression/study/:id\" component={Detail} />\n        </Switch>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n}\n\nfunction NavBar() {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar>\n        <Link href=\"/expression\" style={{display: \"flex\"}}>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <HomeIcon style={{color: \"white\"}}/>\n          </IconButton>\n          <Hidden only=\"xs\">\n            <Typography variant=\"h6\" color=\"textPrimary\" noWrap\n              className={classes.headerText}>{Constants.TITLE}</Typography>\n          </Hidden>\n        </Link>\n\n        <nav style={{marginLeft: \"auto\", display: \"flex\"}}>\n          {\n            Constants.ROUTES.map((route, idx) => (\n              <Link variant=\"button\" color=\"textSecondary\" href={route.link} className={classes.headerText} key={idx}>\n                {route.title}\n              </Link>\n            ))\n          }\n        </nav>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { hydrate, render } from \"react-dom\";\n\n\nconst rootElement = document.getElementById('root');\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}